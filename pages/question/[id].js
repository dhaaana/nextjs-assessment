import Head from "next/head";
import { useRouter } from "next/router";
import React, { useState, useEffect } from "react";
import Skeleton from "../components/Skeleton";
import styles from "../../styles/Home.module.css";

export default function Question({ juz30 }) {
  const router = useRouter();
  const { id } = router.query;
  const [isLoading, setIsLoading] = useState(true);
  const [questioncount, setQuestionCount] = useState(2);
  const [point, setPoint] = useState(1);
  const [randomayat, setRandomAyat] = useState();
  const [ayat, setAyat] = useState();
  const [surah, setSurah] = useState();

  async function cobaAsync() {
    const shuffledjuz30 = await juz30.sort((a, b) => 0.5 - Math.random()).filter((surat, idx) => idx < 4);
    let randomsurahs = await shuffledjuz30.map((a) => a.number_of_surah);
    let randomsurah = await Math.floor(Math.random() * randomsurahs.length);
    setSurah(shuffledjuz30);
    await fetch(`https://raw.githubusercontent.com/penggguna/QuranJSON/master/surah/${randomsurahs[randomsurah]}.json`)
      .then((data) => data.json())
      .then((data) => {
        setAyat(data);
        setRandomAyat(Math.floor(Math.random() * data.verses.length));
        setIsLoading((prevState) => !prevState);
      });
  }

  function handleAnswer(id, question) {
    if (question > 9) {
      router.push({ pathname: "/score", query: { point: point, question: question } });
    } else {
      setIsLoading((prevState) => !prevState);
      if (id === ayat.number_of_surah) {
        setPoint((prevState) => prevState + 1);
        console.log("Point = ", point);
      }
      setQuestionCount((prevState) => prevState + 1);
      console.log("Question = ", questioncount);
      router.push(`/question/${questioncount}`);
    }
  }

  useEffect(() => {
    cobaAsync();
  }, [id]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Question No. {id}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>Question {id}</h1>
        {isLoading ? <Skeleton type={"text"}></Skeleton> : <p className={styles.verses}>{ayat.verses[randomayat].text}</p>}
        {/* <button onClick={() => console.log(surah)}>Tes</button> */}
        <p className={styles.question}>Potongan surat di atas merupakan ayat dari surat?</p>
        <div className={styles.choice}>
          {isLoading
            ? [1, 2, 3, 4].map((n) => {
                return <Skeleton key={n} type={"card"}></Skeleton>;
              })
            : surah.map((surat) => {
                return (
                  <button key={surat.number_of_surah} onClick={() => handleAnswer(surat.number_of_surah, id)} className={styles.card}>
                    <h2>{surat.name} &rarr;</h2>
                  </button>
                );
              })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app" target="_blank" rel="noopener noreferrer">
          Copyright 2021 Al-Quran Assessment
        </a>
      </footer>
    </div>
  );
}

export async function getServerSideProps() {
  const res = await fetch(`https://raw.githubusercontent.com/penggguna/QuranJSON/master/quran.json`);
  const data = await res.json();
  const juz30 = await data.slice(78);

  // Pass data to the page via props
  return { props: { juz30 } };
}
